<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\bk3432_ble_app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\bk3432_ble_app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Dec 25 17:19:36 2020
<BR><P>
<H3>Maximum Stack Usage =        260 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_period_timer_handler &rArr; hi_timer_cb &rArr; TreadmillDataNotify &rArr; SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[86]">sys_Reset</a>
 <LI><a href="#[1]">Undefined</a>
 <LI><a href="#[2]">SoftwareInterrupt</a>
 <LI><a href="#[3]">PrefetchAbort</a>
 <LI><a href="#[4]">DataAbort</a>
 <LI><a href="#[6]">IRQ_Handler</a>
 <LI><a href="#[5]">sys_reserved</a>
 <LI><a href="#[7]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DataAbort</a> from boot_vectors.o(SYS_BOOT) referenced from boot_vectors.o(SYS_BOOT)
 <LI><a href="#[7]">FIQ_Handler</a> from boot_vectors.o(SYS_BOOT) referenced from boot_vectors.o(SYS_BOOT)
 <LI><a href="#[6]">IRQ_Handler</a> from boot_vectors.o(SYS_BOOT) referenced from boot_vectors.o(SYS_BOOT)
 <LI><a href="#[3]">PrefetchAbort</a> from boot_vectors.o(SYS_BOOT) referenced from boot_vectors.o(SYS_BOOT)
 <LI><a href="#[19]">Read_Uart_Buf</a> from uart.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[2]">SoftwareInterrupt</a> from boot_vectors.o(SYS_BOOT) referenced from boot_vectors.o(SYS_BOOT)
 <LI><a href="#[1]">Undefined</a> from boot_vectors.o(SYS_BOOT) referenced from boot_vectors.o(SYS_BOOT)
 <LI><a href="#[2c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[5d]">app_batt_add_bas</a> from app_batt.o(.text) referenced from app.o(.constdata)
 <LI><a href="#[5f]">app_batt_msg_dflt_handler</a> from app_batt.o(.text) referenced from app_batt.o(.constdata)
 <LI><a href="#[5c]">app_dis_add_dis</a> from app_dis.o(.text) referenced from app.o(.constdata)
 <LI><a href="#[82]">app_ffc1_writer_req_handler</a> from app_oads.o(.text) referenced from app_oads.o(.constdata)
 <LI><a href="#[84]">app_ffc2_writer_req_handler</a> from app_oads.o(.text) referenced from app_oads.o(.constdata)
 <LI><a href="#[5b]">app_fff0_add_fff0s</a> from app_fff0.o(.text) referenced from app.o(.constdata)
 <LI><a href="#[64]">app_fff0_msg_dflt_handler</a> from app_fff0.o(.text) referenced from app_fff0.o(.constdata)
 <LI><a href="#[5a]">app_ftmp_add_ftmps</a> from app_ftmp.o(.text) referenced from app.o(.constdata)
 <LI><a href="#[7a]">app_gpio_scan_timer_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[5e]">app_oad_add_oads</a> from app_oads.o(.text) referenced from app.o(.constdata)
 <LI><a href="#[80]">app_oads_msg_dflt_handler</a> from app_oads.o(.text) referenced from app_oads.o(.constdata)
 <LI><a href="#[78]">app_period_timer_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[7b]">app_sec_msg_dflt_handler</a> from app_sec.o(.text) referenced from app_sec.o(.constdata)
 <LI><a href="#[69]">appm_msg_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[17]">assert_err</a> from arch_main.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[18]">assert_param</a> from arch_main.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[60]">bass_batt_level_ntf_cfg_ind_handler</a> from app_batt.o(.text) referenced from app_batt.o(.constdata)
 <LI><a href="#[32]">bass_batt_level_upd_req_handler</a> from bass_task.o(.text) referenced from bass_task.o(.constdata)
 <LI><a href="#[30]">bass_cleanup</a> from bass.o(.text) referenced from bass.o(.constdata)
 <LI><a href="#[2f]">bass_create</a> from bass.o(.text) referenced from bass.o(.constdata)
 <LI><a href="#[2e]">bass_destroy</a> from bass.o(.text) referenced from bass.o(.constdata)
 <LI><a href="#[31]">bass_enable_req_handler</a> from bass_task.o(.text) referenced from bass_task.o(.constdata)
 <LI><a href="#[62]">bass_enable_rsp_handler</a> from app_batt.o(.text) referenced from app_batt.o(.constdata)
 <LI><a href="#[2d]">bass_init</a> from bass.o(.text) referenced from bass.o(.constdata)
 <LI><a href="#[61]">batt_level_upd_handler</a> from app_batt.o(.text) referenced from app_batt.o(.constdata)
 <LI><a href="#[3a]">diss_cleanup</a> from diss.o(.text) referenced from diss.o(.constdata)
 <LI><a href="#[39]">diss_create</a> from diss.o(.text) referenced from diss.o(.constdata)
 <LI><a href="#[38]">diss_destroy</a> from diss.o(.text) referenced from diss.o(.constdata)
 <LI><a href="#[37]">diss_init</a> from diss.o(.text) referenced from diss.o(.constdata)
 <LI><a href="#[3b]">diss_set_value_req_handler</a> from diss_task.o(.text) referenced from diss_task.o(.constdata)
 <LI><a href="#[3d]">diss_value_cfm_handler</a> from diss_task.o(.text) referenced from diss_task.o(.constdata)
 <LI><a href="#[63]">diss_value_req_ind_handler</a> from app_dis.o(.text) referenced from app_dis.o(.constdata)
 <LI><a href="#[41]">fff0s_cleanup</a> from fff0s.o(.text) referenced from fff0s.o(.constdata)
 <LI><a href="#[40]">fff0s_create</a> from fff0s.o(.text) referenced from fff0s.o(.constdata)
 <LI><a href="#[3f]">fff0s_destroy</a> from fff0s.o(.text) referenced from fff0s.o(.constdata)
 <LI><a href="#[65]">fff0s_fff1_level_ntf_cfg_ind_handler</a> from app_fff0.o(.text) referenced from app_fff0.o(.constdata)
 <LI><a href="#[42]">fff0s_fff1_level_upd_req_handler</a> from fff0s_task.o(.text) referenced from fff0s_task.o(.constdata)
 <LI><a href="#[3e]">fff0s_init</a> from fff0s.o(.text) referenced from fff0s.o(.constdata)
 <LI><a href="#[66]">fff1_level_upd_handler</a> from app_fff0.o(.text) referenced from app_fff0.o(.constdata)
 <LI><a href="#[68]">fff1_period_ntf_handler</a> from app_fff0.o(.text) referenced from app_fff0.o(.constdata)
 <LI><a href="#[67]">fff2_writer_req_handler</a> from app_fff0.o(.text) referenced from app_fff0.o(.constdata)
 <LI><a href="#[54]">ftmps_cleanup</a> from ftmps.o(.text) referenced from ftmps.o(.constdata)
 <LI><a href="#[53]">ftmps_create</a> from ftmps.o(.text) referenced from ftmps.o(.constdata)
 <LI><a href="#[52]">ftmps_destroy</a> from ftmps.o(.text) referenced from ftmps.o(.constdata)
 <LI><a href="#[51]">ftmps_init</a> from ftmps.o(.text) referenced from ftmps.o(.constdata)
 <LI><a href="#[55]">ftmps_level_upd_req_handler</a> from ftmps_task.o(.text) referenced from ftmps_task.o(.constdata)
 <LI><a href="#[7d]">gapc_bond_ind_handler</a> from app_sec.o(.text) referenced from app_sec.o(.constdata)
 <LI><a href="#[7c]">gapc_bond_req_ind_handler</a> from app_sec.o(.text) referenced from app_sec.o(.constdata)
 <LI><a href="#[6f]">gapc_cmp_evt_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[6e]">gapc_connection_req_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[70]">gapc_disconnect_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[7f]">gapc_encrypt_ind_handler</a> from app_sec.o(.text) referenced from app_sec.o(.constdata)
 <LI><a href="#[7e]">gapc_encrypt_req_ind_handler</a> from app_sec.o(.text) referenced from app_sec.o(.constdata)
 <LI><a href="#[6c]">gapc_get_dev_info_req_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[72]">gapc_le_pkt_size_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[76]">gapc_param_update_req_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[73]">gapc_param_updated_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[74]">gapc_send_security_req_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[6d]">gapc_set_dev_info_req_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[77]">gapc_update_conn_param_req_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[6b]">gapm_cmp_evt_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[6a]">gapm_device_ready_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[71]">gapm_profile_added_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[33]">gattc_att_info_req_ind_handler</a> from bass_task.o(.text) referenced 3 times from bass_task.o(.constdata)
 <LI><a href="#[36]">gattc_cmp_evt_handler</a> from bass_task.o(.text) referenced 4 times from bass_task.o(.constdata)
 <LI><a href="#[75]">gattc_mtu_changed_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[79]">gattc_mtu_exchange_req_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[35]">gattc_read_req_ind_handler</a> from bass_task.o(.text) referenced 5 times from bass_task.o(.constdata)
 <LI><a href="#[34]">gattc_write_req_ind_handler</a> from bass_task.o(.text) referenced 4 times from bass_task.o(.constdata)
 <LI><a href="#[23]">hi_handle_default</a> from hilink.o(.text) referenced from hilink.o(.text)
 <LI><a href="#[1f]">hi_timer_cb</a> from hilink.o(.text) referenced from hilink.o(.text)
 <LI><a href="#[4a]">oads_cleanup</a> from oads.o(.text) referenced from oads.o(.constdata)
 <LI><a href="#[49]">oads_create</a> from oads.o(.text) referenced from oads.o(.constdata)
 <LI><a href="#[48]">oads_destroy</a> from oads.o(.text) referenced from oads.o(.constdata)
 <LI><a href="#[4b]">oads_enable_req_handler</a> from oads_task.o(.text) referenced from oads_task.o(.constdata)
 <LI><a href="#[81]">oads_enable_rsp_handler</a> from app_oads.o(.text) referenced from app_oads.o(.constdata)
 <LI><a href="#[4c]">oads_ffc1_upd_req_handler</a> from oads_task.o(.text) referenced from oads_task.o(.constdata)
 <LI><a href="#[83]">oads_ffc1_upd_rsp_handler</a> from app_oads.o(.text) referenced from app_oads.o(.constdata)
 <LI><a href="#[4d]">oads_ffc2_upd_req_handler</a> from oads_task.o(.text) referenced from oads_task.o(.constdata)
 <LI><a href="#[85]">oads_ffc2_upd_rsp_handler</a> from app_oads.o(.text) referenced from app_oads.o(.constdata)
 <LI><a href="#[47]">oads_init</a> from oads.o(.text) referenced from oads.o(.constdata)
 <LI><a href="#[16]">platform_reset</a> from arch_main.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[e]">prf_add_profile</a> from prf.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[d]">prf_cleanup</a> from prf.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[c]">prf_create</a> from prf.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[9]">prf_get_id_from_task</a> from prf.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[a]">prf_get_task_from_id</a> from prf.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[b]">prf_init</a> from prf.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[2a]">rf_force_agc_enable</a> from rf_xvr.o(.text) referenced from rf_xvr.o(.text)
 <LI><a href="#[29]">rf_reset</a> from rf_xvr.o(.text) referenced from rf_xvr.o(.text)
 <LI><a href="#[25]">rf_rpl_reg_rd</a> from rf_xvr.o(.text) referenced from rf_xvr.o(.text)
 <LI><a href="#[26]">rf_rpl_reg_wr</a> from rf_xvr.o(.text) referenced from rf_xvr.o(.text)
 <LI><a href="#[2b]">rf_rssi_convert</a> from rf_xvr.o(.text) referenced from rf_xvr.o(.text)
 <LI><a href="#[28]">rf_sleep</a> from rf_xvr.o(.text) referenced from rf_xvr.o(.text)
 <LI><a href="#[27]">rf_txpwr_dbm_get</a> from rf_xvr.o(.text) referenced from rf_xvr.o(.text)
 <LI><a href="#[f]">rwble_hl_reset</a> from rwble_hl.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[12]">rwip_prevent_sleep_clear</a> from rwip.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[11]">rwip_prevent_sleep_set</a> from rwip.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[10]">rwip_reset</a> from rwip.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[13]">rwip_sleep_lpcycles_2_us</a> from rwip.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[14]">rwip_us_2_lpcycles</a> from rwip.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[15]">rwip_wakeup_delay_set</a> from rwip.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[86]">sys_Reset</a> from boot_handlers.o(SYS_BOOT) referenced from boot_vectors.o(SYS_BOOT)
 <LI><a href="#[5]">sys_reserved</a> from boot_vectors.o(SYS_BOOT) referenced from boot_vectors.o(SYS_BOOT)
 <LI><a href="#[20]">uart2_rx_handler</a> from hilink.o(.text) referenced from hilink.o(.text)
 <LI><a href="#[1a]">uart_clear_rxfifo</a> from uart.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[1e]">uart_flow_off</a> from uart.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[1d]">uart_flow_on</a> from uart.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[24]">uart_printf</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[1b]">uart_read</a> from uart.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[22]">uart_rx_handler</a> from hilink.o(.text) referenced from hilink.o(.text)
 <LI><a href="#[1c]">uart_write</a> from uart.o(.text) referenced from arch_main.o(.text)
 <LI><a href="#[21]">user_gpio_isr</a> from hilink.o(.text) referenced from hilink.o(.text)
 <LI><a href="#[8]">user_timer_cb</a> from arch_main.o(.text) referenced from arch_main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[149]"></a>uart_stack_register</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1cd]"></a>Undefined_Exception</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined (via Veneer)
</UL>

<P><STRONG><a name="[1ce]"></a>SoftwareInterrupt_Exception</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterrupt (via Veneer)
</UL>

<P><STRONG><a name="[1cf]"></a>PrefetchAbort_Exception</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort (via Veneer)
</UL>

<P><STRONG><a name="[1d0]"></a>DataAbort_Exception</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAbort (via Veneer)
</UL>

<P><STRONG><a name="[1d1]"></a>Reserved_Exception</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_reserved (via Veneer)
</UL>

<P><STRONG><a name="[120]"></a>ke_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[126]"></a>ke_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[12b]"></a>ke_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[134]"></a>ke_event_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[12a]"></a>ke_event_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
</UL>

<P><STRONG><a name="[121]"></a>ke_mem_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[156]"></a>ke_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_util_svc_create_db128
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
</UL>

<P><STRONG><a name="[159]"></a>ke_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_util_svc_create_db128
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_destroy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_destroy
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_destroy
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_destroy
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
</UL>

<P><STRONG><a name="[15f]"></a>ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff1_send_lvl
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc2_ntf_req
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc1_ntf_req
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_oads_enable_prf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_mtu_exchange_req_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_req_ind_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_req_ind_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_req_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_device_ready_ind_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_req_ind_handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_send_lvl
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_enable_prf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_send_security_req
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_oad_add_oads
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ftmp_add_ftmps
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff0_add_fff0s
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_add_dis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_add_bas
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_adv_data
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_disconnect
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_notify_lvl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_enable_req_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_param
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockReq
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyReq
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_notify_fff1_lvl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_lvl
</UL>

<P><STRONG><a name="[160]"></a>ke_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff1_send_lvl
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc2_ntf_req
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc1_ntf_req
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_oads_enable_prf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_mtu_exchange_req_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_req_ind_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_req_ind_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_req_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_device_ready_ind_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_req_ind_handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_send_lvl
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_enable_prf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_send_security_req
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_oad_add_oads
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ftmp_add_ftmps
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff0_add_fff0s
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_add_dis
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_add_bas
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_adv_data
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_disconnect
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_notify_lvl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_enable_req_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_param
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockReq
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyReq
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_notify_fff1_lvl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_lvl
</UL>

<P><STRONG><a name="[178]"></a>ke_task_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
</UL>

<P><STRONG><a name="[15a]"></a>ke_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_ind_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_level_upd_req_handler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_fff1_level_upd_req_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
</UL>

<P><STRONG><a name="[cf]"></a>ke_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_added_ind_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_adv_data
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_level_upd_req_handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_enable_req_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_fff1_level_upd_req_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
</UL>

<P><STRONG><a name="[177]"></a>ke_task_msg_flush</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[fb]"></a>ke_timer_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inquire_timer_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_heartbeat_timer_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_drive
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_period_timer_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_fff1_level_ntf_cfg_ind_handler
</UL>

<P><STRONG><a name="[1a4]"></a>ke_timer_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wkup_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_mtu_changed_ind_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_fff1_level_ntf_cfg_ind_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_send_security_req
</UL>

<P><STRONG><a name="[1b0]"></a>ke_timer_active</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
</UL>

<P><STRONG><a name="[12d]"></a>ke_timer_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[167]"></a>co_list_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>

<P><STRONG><a name="[16c]"></a>co_list_push_back</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
</UL>

<P><STRONG><a name="[168]"></a>co_list_pop_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_destroy
</UL>

<P><STRONG><a name="[16b]"></a>co_list_extract</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
</UL>

<P><STRONG><a name="[109]"></a>em_buf_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[10b]"></a>llc_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[110]"></a>llc_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>

<P><STRONG><a name="[10a]"></a>lld_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[10f]"></a>lld_core_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>

<P><STRONG><a name="[11a]"></a>lld_crypt_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[119]"></a>lld_evt_timer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[115]"></a>lld_evt_end_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[117]"></a>lld_evt_rx_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[131]"></a>lld_sleep_enter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[132]"></a>lld_sleep_wakeup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>

<P><STRONG><a name="[133]"></a>lld_sleep_wakeup_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[10c]"></a>llm_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[10d]"></a>llm_ble_ready</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[124]"></a>ea_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[114]"></a>ea_finetimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[118]"></a>ea_sw_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[12f]"></a>ea_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[163]"></a>gapc_get_conhdl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_enable_req_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
</UL>

<P><STRONG><a name="[1af]"></a>gapc_get_bdaddr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[11d]"></a>gapm_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
</UL>

<P><STRONG><a name="[157]"></a>attm_svc_create_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
</UL>

<P><STRONG><a name="[179]"></a>attm_svc_create_db128</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_init
</UL>

<P><STRONG><a name="[158]"></a>attm_att_set_permission</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
</UL>

<P><STRONG><a name="[11c]"></a>attm_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
</UL>

<P><STRONG><a name="[194]"></a>attmdb_add_service</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_util_svc_create_db128
</UL>

<P><STRONG><a name="[11e]"></a>gattm_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
</UL>

<P><STRONG><a name="[11f]"></a>l2cm_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
</UL>

<P><STRONG><a name="[123]"></a>hci_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[127]"></a>hci_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Is_Full
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Trans
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Copy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Out
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_In
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Del
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_drive
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetD8Gears
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_Power
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instantaneous_Power
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppMachineControlPointToUart
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_idivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_spare
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
</UL>

<P><STRONG><a name="[fa]"></a>rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_check_drive_timer_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_drive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[a2]"></a>srand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdaddr_env_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfiginit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff1_send_lvl
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_pmt_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdaddr_env_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_req_ind_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_get_dev_name
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_adv_data
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_char_convert_to128
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_serv_convert_to128
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUnlockCode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_notify_lvl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oad_save_reciveData
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_notify_fff1_lvl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_lvl
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmp_level_upd_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff1_period_ntf_handler
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfiginit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_remove_bond
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clear_rxfifo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_env_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_clear_rxfifo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TreadmillDataNotify
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
</UL>

<P><STRONG><a name="[c3]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUnlockCode
</UL>

<P><STRONG><a name="[1c6]"></a>__ARM_clz</STRONG> (ARM, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue (via BLX)
</UL>

<P><STRONG><a name="[8d]"></a>__ARM_common_disable_fiq</STRONG> (ARM, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset (via BLX)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via BLX)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main (via BLX)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset (via BLX)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset (via BLX)
</UL>

<P><STRONG><a name="[8e]"></a>__ARM_common_disable_irq</STRONG> (ARM, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset (via BLX)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via BLX)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main (via BLX)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset (via BLX)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset (via BLX)
</UL>

<P><STRONG><a name="[a4]"></a>__ARM_common_enable_fiq</STRONG> (ARM, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset (via BLX)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via BLX)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main (via BLX)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset (via BLX)
</UL>

<P><STRONG><a name="[a5]"></a>__ARM_common_enable_irq</STRONG> (ARM, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset (via BLX)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via BLX)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main (via BLX)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset (via BLX)
</UL>

<P><STRONG><a name="[c5]"></a>__ARM_common_switch8</STRONG> (ARM, 0 bytes, Stack size 0 bytes, stack_rom_symbol.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_drive (via BLX)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TreadmillDataNotify (via BLX)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_Power (via BLX)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instantaneous_Power (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_req_ind_handler (via BLX)
</UL>

<P><STRONG><a name="[86]"></a>sys_Reset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, boot_handlers.o(SYS_BOOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sys_Reset &rArr; rw_main &rArr; hilink_init &rArr; rwip_init &rArr; appm_init &rArr; app_sec_init &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_reset (via BLX)
</UL>

<P><STRONG><a name="[87]"></a>SYSirq_FIQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, intc.o(sys_fiq_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SYSirq_FIQ_Handler &rArr; FIQ_Exception &rArr; rwble_isr &rArr; rwip_wakeup_end &rArr; rwip_prevent_sleep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[89]"></a>SYSirq_IRQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, intc.o(sys_irq_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SYSirq_IRQ_Handler &rArr; IRQ_Exception &rArr; gpio_isr &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[17]"></a>assert_err</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = assert_err &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_lpcycles_2_us
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>assert_param</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = assert_param &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>assert_warn</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, arch_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[8c]"></a>dump_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arch_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[16]"></a>platform_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = platform_reset &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_fiq (via BLX)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_finish_transfers
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>bdaddr_env_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, arch_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1d2]"></a>ble_clk_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, arch_main.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>user_timer_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = user_timer_cb &rArr; gpio_triger &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_triger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>user_timer_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, arch_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icu_set_sleep_mode
</UL>

<P><STRONG><a name="[98]"></a>rom_env_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rom_env_init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[9f]"></a>rwip_eif_api_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arch_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[9a]"></a>rw_main</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rw_main &rArr; hilink_init &rArr; rwip_init &rArr; appm_init &rArr; app_sec_init &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via BLX)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_fiq (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_fiq (via BLX)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_disable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_sleep_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intc_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icu_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icu_get_sleep_mode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emi_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_reduce_voltage_sleep
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_idle_sleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_eif_api_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rom_env_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_Integrity_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Reset (via Veneer)
</UL>

<P><STRONG><a name="[1d3]"></a>rwip_eif_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arch_main.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>uart_printf_buf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_printf_buf &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_handle_default
</UL>

<P><STRONG><a name="[b0]"></a>xor_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_crc16
</UL>

<P><STRONG><a name="[b1]"></a>hi_crc16</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hi_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_crc16
</UL>

<P><STRONG><a name="[af]"></a>xor_crc16</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xor_crc16 &rArr; hi_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_crc16
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pwd
</UL>

<P><STRONG><a name="[b2]"></a>check_pwd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = check_pwd &rArr; xor_crc16 &rArr; hi_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_handler
</UL>

<P><STRONG><a name="[b3]"></a>flash_get</STRONG> (Thumb, 36 bytes, Stack size 136 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = flash_get &rArr; flash_read &rArr; flash_readword
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
</UL>

<P><STRONG><a name="[b5]"></a>flash_set</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_set &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_crc16
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
</UL>

<P><STRONG><a name="[ba]"></a>check_gpio</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hilink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_get
</UL>

<P><STRONG><a name="[b9]"></a>hi_gpio_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hi_gpio_get &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_get_input
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
</UL>

<P><STRONG><a name="[bd]"></a>hi_gpio_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hi_gpio_set &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
</UL>

<P><STRONG><a name="[bf]"></a>hi_adc_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hi_adc_get &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
</UL>

<P><STRONG><a name="[c1]"></a>hi_reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hi_reset &rArr; sys_Reset &rArr; rw_main &rArr; hilink_init &rArr; rwip_init &rArr; appm_init &rArr; app_sec_init &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Reset (via BLX)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
</UL>

<P><STRONG><a name="[c2]"></a>uart_handle</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = uart_handle &rArr; flash_get &rArr; flash_read &rArr; flash_readword
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_adc_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>

<P><STRONG><a name="[ce]"></a>hget</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hget
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>

<P><STRONG><a name="[c4]"></a>instantaneous_Power</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = instantaneous_Power
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>

<P><STRONG><a name="[c7]"></a>average_Power</STRONG> (Thumb, 482 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = average_Power
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>

<P><STRONG><a name="[c8]"></a>hlink_set_status</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hlink_set_status &rArr; FitnessMachineStatusnotify &rArr; SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainingStatusRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineStatusnotify
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_deinit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>

<P><STRONG><a name="[cb]"></a>GetD8Gears</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetD8Gears &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>

<P><STRONG><a name="[1f]"></a>hi_timer_cb</STRONG> (Thumb, 712 bytes, Stack size 48 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = hi_timer_cb &rArr; TreadmillDataNotify &rArr; SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_value
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TreadmillDataNotify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainingStatusRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineStatusnotify
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetD8Gears
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlink_set_status
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_Power
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instantaneous_Power
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hget
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_adc_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_period_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>hilink_timer_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hilink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[1a5]"></a>hilink_set_r_buf</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hilink_set_r_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff2_writer_req_handler
</UL>

<P><STRONG><a name="[d7]"></a>hilink_get_r_buf</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, hilink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_recv_buf
</UL>

<P><STRONG><a name="[d3]"></a>hilink_send_buf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hilink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff1_send_lvl
</UL>

<P><STRONG><a name="[d5]"></a>hilink_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hilink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff1_send_lvl
</UL>

<P><STRONG><a name="[e3]"></a>hilink_recv_buf_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hilink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
</UL>

<P><STRONG><a name="[1d4]"></a>hilink_recv_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hilink.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>hilink_recv_buf</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hilink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_get_r_buf
</UL>

<P><STRONG><a name="[1d5]"></a>hilink_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hilink.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>hilink_status_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hilink.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>hilink_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hilink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlink_set_status
</UL>

<P><STRONG><a name="[195]"></a>hi_get_dev_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hilink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
</UL>

<P><STRONG><a name="[1d7]"></a>UartCommandDispatch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hilink.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>get_int4</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, hilink.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>hilink_pmt_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hilink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_cb_register
</UL>

<P><STRONG><a name="[23]"></a>hi_handle_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hi_handle_default &rArr; uart_printf_buf &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_send
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>d8_wakeup_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hilink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_gpio_isr
</UL>

<P><STRONG><a name="[21]"></a>user_gpio_isr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hilink.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d8_wakeup_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>d8GpioInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = d8GpioInit &rArr; gpio_config
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_cb_register
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
</UL>

<P><STRONG><a name="[a3]"></a>hilink_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hilink_init &rArr; rwip_init &rArr; appm_init &rArr; app_sec_init &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icu_set_sleep_mode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cb_register
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d8GpioInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_recv_buf_isr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlink_set_status
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdaddr_env_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[e6]"></a>apptcuserconfiginit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfigread
</UL>

<P><STRONG><a name="[e8]"></a>apptcuserconfigread</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfiginit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
</UL>

<P><STRONG><a name="[e9]"></a>user_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfigread
</UL>

<P><STRONG><a name="[eb]"></a>app_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Clear
</UL>

<P><STRONG><a name="[ed]"></a>apptcbletxhandle</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Out
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Del
</UL>

<P><STRONG><a name="[f1]"></a>apptcuarttxdata</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcblerxhandle
</UL>

<P><STRONG><a name="[f2]"></a>apptcblerxhandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuarttxdata
</UL>

<P><STRONG><a name="[f3]"></a>apptcuserconfig_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[1d9]"></a>user_send_connect_cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>apptcuartrxcompeletset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>apptcuartrxdatain</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_In
</UL>

<P><STRONG><a name="[f6]"></a>apptcconnhandle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Del
</UL>

<P><STRONG><a name="[f7]"></a>apptcdisconnhandle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Del
</UL>

<P><STRONG><a name="[f8]"></a>apptc_cmd_encode</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inquire_timer_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_check_drive_timer_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_heartbeat_timer_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_drive
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppExtensionDataToUart
</UL>

<P><STRONG><a name="[f9]"></a>user_check_drive</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
</UL>

<P><STRONG><a name="[fc]"></a>apptc_cmd_decode</STRONG> (Thumb, 452 bytes, Stack size 72 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedRangeRead
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_drive
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_encode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TreadmillDataNotify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainingStatusRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineStatusnotify
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_data_decode
</UL>

<P><STRONG><a name="[fe]"></a>apptc_data_decode</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_uart_rx_handle
</UL>

<P><STRONG><a name="[ff]"></a>apptc_uart_rx_handle</STRONG> (Thumb, 60 bytes, Stack size 528 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Out
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_data_decode
</UL>

<P><STRONG><a name="[100]"></a>app_heartbeat_timer_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_encode
</UL>

<P><STRONG><a name="[101]"></a>app_check_drive_timer_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_encode
</UL>

<P><STRONG><a name="[102]"></a>app_inquire_timer_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_encode
</UL>

<P><STRONG><a name="[ea]"></a>User_Queue_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
</UL>

<P><STRONG><a name="[ec]"></a>User_Queue_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_clear
</UL>

<P><STRONG><a name="[ee]"></a>User_Queue_Get_Len</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Trans
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Copy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Out
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Del
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_uart_rx_handle
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcdisconnhandle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcconnhandle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcbletxhandle
</UL>

<P><STRONG><a name="[104]"></a>User_Queue_Get_spare</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_Trans
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Data_In
</UL>

<P><STRONG><a name="[f5]"></a>User_Queue_Data_In</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_spare
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuartrxdatain
</UL>

<P><STRONG><a name="[f0]"></a>User_Queue_Data_Out</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_uart_rx_handle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcbletxhandle
</UL>

<P><STRONG><a name="[105]"></a>User_Queue_Data_Copy</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
</UL>

<P><STRONG><a name="[106]"></a>User_Queue_Data_Trans</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_spare
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
</UL>

<P><STRONG><a name="[ef]"></a>User_Queue_Data_Del</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Queue_Get_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcdisconnhandle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcconnhandle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcbletxhandle
</UL>

<P><STRONG><a name="[107]"></a>User_Queue_Is_Full</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1db]"></a>User_Queue_Is_Empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, user_queue.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>rwble_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwble_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ble_ready
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[10e]"></a>rwble_reset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwble_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via BLX)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_fiq (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_fiq (via BLX)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_core_reset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[12e]"></a>rwble_sleep_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rwble.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[1dc]"></a>rwble_activity_ongoing_check</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rwble.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>rwble_version</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rwble.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_version
</UL>

<P><STRONG><a name="[111]"></a>rwble_isr</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rwble_isr &rArr; rwip_wakeup_end &rArr; rwip_prevent_sleep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_sw_isr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_finetimer_isr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_timer_isr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_crypt_isr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception
</UL>

<P><STRONG><a name="[11b]"></a>rwble_hl_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rwble_hl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwble_hl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[f]"></a>rwble_hl_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rwble_hl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwble_hl_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>rwip_check_wakeup_boundary</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rwip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[e5]"></a>rwip_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rwip_init &rArr; appm_init &rArr; app_sec_init &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
</UL>

<P><STRONG><a name="[10]"></a>rwip_reset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rwip_reset &rArr; rwble_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via BLX)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_fiq (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_fiq (via BLX)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>rwip_version</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_version
</UL>

<P><STRONG><a name="[a6]"></a>rwip_schedule</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwip_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[11]"></a>rwip_prevent_sleep_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwip_prevent_sleep_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via BLX)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_fiq (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_fiq (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>rwip_sleep</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rwip_sleep &rArr; assert_err &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_sleep_check
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_enter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_sleep_check
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_uart_stop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_check_wakeup_boundary
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_sleep_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[112]"></a>rwip_wakeup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rwip_wakeup &rArr; rwip_prevent_sleep_set
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[12]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwip_prevent_sleep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via BLX)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_fiq (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_fiq (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>rwip_wakeup_end</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rwip_wakeup_end &rArr; rwip_prevent_sleep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup_end
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[14]"></a>rwip_us_2_lpcycles</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>rwip_wakeup_delay_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwip_wakeup_delay_set &rArr; rwip_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_us_2_lpcycles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[1dd]"></a>rwip_prevent_sleep_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwip.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>rwip_sleep_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwip.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>rwip_ext_wakeup_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwip.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>rwip_sleep_lpcycles_2_us</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rwip_sleep_lpcycles_2_us &rArr; assert_err &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[1e0]"></a>rwip_assert_err</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rwip.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>flash_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[135]"></a>flash_readword</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_readword
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_start
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clearKey
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeKey
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>

<P><STRONG><a name="[13b]"></a>flash_writeword</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_writeword
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_start
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clearKey
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeKey
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[13c]"></a>flash_erase_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_start
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clearKey
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeKey
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_remove_bond
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[b7]"></a>flash_erase</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_erase &rArr; flash_erase_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfig_write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfigread
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set
</UL>

<P><STRONG><a name="[b8]"></a>flash_write</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_write &rArr; flash_writeword
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeword
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfig_write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfigread
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_remove_bond
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oad_updating_user_section_pro
</UL>

<P><STRONG><a name="[92]"></a>flash_read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_read &rArr; flash_readword
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readword
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdaddr_env_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfigread
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuserconfiginit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdaddr_env_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_remove_bond
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyWrite
</UL>

<P><STRONG><a name="[1e1]"></a>crc16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>write_lmecc_pointq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>read_lmecc_pointq_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>read_lmecc_pointq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>emi_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, emi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[bb]"></a>gpio_config</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_test_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d8GpioInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlink_set_status
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
</UL>

<P><STRONG><a name="[bc]"></a>gpio_get_input</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_get
</UL>

<P><STRONG><a name="[be]"></a>gpio_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_triger
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlink_set_status
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_set
</UL>

<P><STRONG><a name="[1e5]"></a>gpio_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>gpio_triger</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_triger &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_cb
</UL>

<P><STRONG><a name="[df]"></a>gpio_cb_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d8GpioInit
</UL>

<P><STRONG><a name="[13d]"></a>gpio_isr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_isr &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[13e]"></a>gpio_test_init</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[1e6]"></a>gpio_sleep</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>gpio_wakeup</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>DEBUG_MSG</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>system_sleep_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[9b]"></a>icu_init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, icu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[a9]"></a>icu_get_sleep_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[96]"></a>icu_set_sleep_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_init
</UL>

<P><STRONG><a name="[13f]"></a>enter_deep_sleep</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, icu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[aa]"></a>cpu_reduce_voltage_sleep</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, icu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_reduce_voltage_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[141]"></a>cpu_wakeup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, icu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[ab]"></a>cpu_idle_sleep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[1e9]"></a>system_reset_reson</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icu.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>switch_clk</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, icu.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>intc_spurious</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>intc_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, intc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[1ec]"></a>intc_stat_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>IRQ_Exception</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, intc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IRQ_Exception &rArr; gpio_isr &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_isr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_wakeup
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_IRQ_Handler (via BLX)
</UL>

<P><STRONG><a name="[88]"></a>FIQ_Exception</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, intc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FIQ_Exception &rArr; rwble_isr &rArr; rwip_wakeup_end &rArr; rwip_prevent_sleep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_wakeup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_FIQ_Handler (via BLX)
</UL>

<P><STRONG><a name="[9e]"></a>timer_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[1ed]"></a>timer_set_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>timer_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>timer_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>timer_isr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
</UL>

<P><STRONG><a name="[19]"></a>Read_Uart_Buf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[1f0]"></a>Uart_Read_Byte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>uart_dev_putchar</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_dev_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_int
</UL>

<P><STRONG><a name="[ad]"></a>uart_putchar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_putchar &rArr; uart_dev_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dev_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack_Integrity_Check
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_ffc1_upd_req_handler
</UL>

<P><STRONG><a name="[24]"></a>uart_printf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dev_putchar
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_data
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_warn
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_param
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_inquire_timer_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_check_drive_timer_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_drive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_value
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetD8Gears
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_reset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_adc_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_gpio_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf_buf
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_handler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ftmp_msg_dflt_handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_level_ntf_cfg_ind_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc2_ntf_req
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc1_ntf_req
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_ffc2_upd_rsp_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_ffc1_upd_rsp_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc2_writer_req_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc1_writer_req_handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_oads_msg_dflt_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_encrypt_flag
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bonding_flag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_ind_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_mtu_exchange_req_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_req_ind_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_mtu_changed_ind_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_updated_ind_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_le_pkt_size_ind_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_req_ind_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_ind_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff0_msg_dflt_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_fff1_level_ntf_cfg_ind_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_send_security_req
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_oad_add_oads
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppMachineControlPointToUart
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUnlockCode
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_ffc2_upd_req_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_enable_req_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_param
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyWrite
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oad_updating_user_section_pro
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oad_updating_user_section_begin
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyReq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[1f1]"></a>uart_printf_null</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>hex2Str</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_int
</UL>

<P><STRONG><a name="[148]"></a>uart_print_int</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dev_putchar
</UL>

<P><STRONG><a name="[1f2]"></a>cpu_delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>uart_init</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_stack_register
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
</UL>

<P><STRONG><a name="[1d]"></a>uart_flow_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>uart_clear_rxfifo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_clear_rxfifo
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>uart_flow_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>uart_finish_transfers</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>

<P><STRONG><a name="[1b]"></a>uart_read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_read &rArr; assert_err &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>uart_write</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_write &rArr; assert_err &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>uart_dev_send_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</UL>

<P><STRONG><a name="[b4]"></a>uart_send</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_send
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dev_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_encode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptcuarttxdata
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get
</UL>

<P><STRONG><a name="[e2]"></a>uart_cb_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
</UL>

<P><STRONG><a name="[1f3]"></a>uart_cb_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>uart_isr</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[130]"></a>check_uart_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[a7]"></a>wdt_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[90]"></a>wdt_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oad_updating_user_section_pro
</UL>

<P><STRONG><a name="[116]"></a>wdt_feed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_isr
</UL>

<P><STRONG><a name="[2b]"></a>rf_rssi_convert</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_xvr.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>Delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rf_xvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK32K_AutoCali_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d8GpioInit
</UL>

<P><STRONG><a name="[14b]"></a>kmod_calibration</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, rf_xvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kmod_calibration &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_xver_BK3432_openLoop
</UL>

<P><STRONG><a name="[14c]"></a>initial_xver_BK3432_openLoop</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, rf_xvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = initial_xver_BK3432_openLoop &rArr; kmod_calibration &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmod_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[122]"></a>rf_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rf_init &rArr; initial_xver_BK3432_openLoop &rArr; kmod_calibration &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_xver_BK3432_openLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[140]"></a>Delay_us</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_xvr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_deep_sleep
</UL>

<P><STRONG><a name="[155]"></a>Delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_value
</UL>

<P><STRONG><a name="[14d]"></a>CLK32K_AutoCali_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_xvr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[1f4]"></a>bk3432_singleWaveCfg</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rf_xvr.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>bk3432_tx_en</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf_xvr.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>Read_Uart2_Buf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>Uart2_Read_Byte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>uart2_dev_putchar</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_putchar
</UL>

<P><STRONG><a name="[14e]"></a>uart2_putchar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_dev_putchar
</UL>

<P><STRONG><a name="[1f8]"></a>uart2_printf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>uart2_printf_null</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>uart2_init</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_pmt_init
</UL>

<P><STRONG><a name="[1fa]"></a>uart2_flow_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>uart2_clear_rxfifo</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1fb]"></a>uart2_flow_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>uart2_finish_transfers</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>uart2_read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>

<P><STRONG><a name="[152]"></a>uart2_write</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>

<P><STRONG><a name="[153]"></a>uart2_dev_send_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_send
</UL>

<P><STRONG><a name="[dc]"></a>uart2_send</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart2_send
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_dev_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_handle_default
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppMachineControlPointToUart
</UL>

<P><STRONG><a name="[db]"></a>uart2_cb_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_pmt_init
</UL>

<P><STRONG><a name="[1fd]"></a>uart2_cb_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>uart2_isr</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>check_uart2_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart2.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>adc_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adc_init &rArr; gpio_config
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_adc_get
</UL>

<P><STRONG><a name="[154]"></a>adc_deinit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[143]"></a>adc_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
</UL>

<P><STRONG><a name="[cd]"></a>adc_get_value</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adc_get_value &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>

<P><STRONG><a name="[97]"></a>pwm_init</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_timer_init
</UL>

<P><STRONG><a name="[200]"></a>pwm_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>pwm_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>pwm_int_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>pwm_int_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>pwm_capture_value_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>pwm_int_handler_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>pwm_isr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>bass_get_att_handle</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bass_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
</UL>

<P><STRONG><a name="[172]"></a>bass_prf_itf_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bass.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[161]"></a>bass_get_att_idx</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bass_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
</UL>

<P><STRONG><a name="[162]"></a>bass_exe_operation</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, bass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bass_exe_operation &rArr; bass_notify_batt_lvl &rArr; bass_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
</UL>

<P><STRONG><a name="[166]"></a>diss_compute_cfg_flag</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, diss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = diss_compute_cfg_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>

<P><STRONG><a name="[176]"></a>diss_prf_itf_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diss.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[16d]"></a>diss_handle_to_value</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, diss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = diss_handle_to_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[169]"></a>diss_value_to_handle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, diss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = diss_value_to_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
</UL>

<P><STRONG><a name="[16a]"></a>diss_check_val_len</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, diss.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
</UL>

<P><STRONG><a name="[16e]"></a>fff0s_get_att_handle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fff0s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fff0s_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_notify_fff1_lvl
</UL>

<P><STRONG><a name="[16f]"></a>fff0s_notify_fff1_lvl</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fff0s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fff0s_notify_fff1_lvl &rArr; fff0s_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_get_att_handle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_fff1_level_upd_req_handler
</UL>

<P><STRONG><a name="[175]"></a>fff0s_prf_itf_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fff0s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[170]"></a>fff0s_get_att_idx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fff0s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fff0s_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
</UL>

<P><STRONG><a name="[b]"></a>prf_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, prf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prf_init &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_msg_flush
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>prf_add_profile</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, prf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_add_profile &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>prf_create</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, prf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prf_create &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>prf_cleanup</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, prf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_cleanup &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>prf_env_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, prf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_level_upd_req_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_get_att_idx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_get_att_handle
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_enable_req_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockReq
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyReq
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_fff1_level_upd_req_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_get_att_idx
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_get_att_handle
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_cfm_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_value_req_handler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_handle
</UL>

<P><STRONG><a name="[15e]"></a>prf_src_task_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_notify_lvl
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockReq
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyReq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_notify_fff1_lvl
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
</UL>

<P><STRONG><a name="[164]"></a>prf_dst_task_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[9]"></a>prf_get_id_from_task</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, prf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_get_id_from_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>prf_get_task_from_id</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, prf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff1_send_lvl
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc2_ntf_req
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc1_ntf_req
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_oads_enable_prf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_send_lvl
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_enable_prf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_lvl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>prf_pack_char_pres_fmt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, prf_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[207]"></a>prf_pack_date_time</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, prf_utils.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>prf_unpack_date_time</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, prf_utils.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>oad_save_reciveData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oad_save_reciveData
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockWrite
</UL>

<P><STRONG><a name="[17b]"></a>oad_updating_user_section_begin</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = oad_updating_user_section_begin &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockWrite
</UL>

<P><STRONG><a name="[17c]"></a>oad_updating_user_section_pro</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, oads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[182]"></a>oad_updating_user_section_end</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockWrite
</UL>

<P><STRONG><a name="[17f]"></a>oadImgIdentifyWrite</STRONG> (Thumb, 320 bytes, Stack size 88 bytes, oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = oadImgIdentifyWrite &rArr; appm_update_param &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_param
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockReq
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyReq
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ffc1_writer_req_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[181]"></a>oadImgBlockWrite</STRONG> (Thumb, 590 bytes, Stack size 64 bytes, oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = oadImgBlockWrite &rArr; oad_updating_user_section_begin &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oad_updating_user_section_end
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oad_updating_user_section_begin
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oad_save_reciveData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockReq
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[174]"></a>oads_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[184]"></a>ftmps_get_att_handle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ftmps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ftmps_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_notify_lvl
</UL>

<P><STRONG><a name="[185]"></a>ftmps_notify_lvl</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ftmps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ftmps_notify_lvl &rArr; ftmps_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_get_att_handle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_level_upd_req_handler
</UL>

<P><STRONG><a name="[173]"></a>ftmps_prf_itf_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftmps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[186]"></a>ftmps_get_att_idx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ftmps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftmps_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
</UL>

<P><STRONG><a name="[1b4]"></a>FitnessMachineFeatureRead</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FitnessMachineFeatureRead
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ftmp_init
</UL>

<P><STRONG><a name="[187]"></a>addTwoOctData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftmps_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TreadmillDataNotify
</UL>

<P><STRONG><a name="[d1]"></a>TreadmillDataNotify</STRONG> (Thumb, 300 bytes, Stack size 168 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TreadmillDataNotify &rArr; SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartDataToApp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addTwoOctData
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>

<P><STRONG><a name="[c9]"></a>TrainingStatusRead</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TrainingStatusRead &rArr; SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartDataToApp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlink_set_status
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ftmp_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppMachineControlPointToUart
</UL>

<P><STRONG><a name="[fd]"></a>SpeedRangeRead</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpeedRangeRead
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ftmp_init
</UL>

<P><STRONG><a name="[1b5]"></a>InclinationRangeRead</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InclinationRangeRead
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ftmp_init
</UL>

<P><STRONG><a name="[209]"></a>ResistanceLevelRangeRead</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ftmps_task.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>HeartRateRangeRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ftmps_task.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>FitnessMachineControlPointResponse</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ftmps_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartDataToApp
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppMachineControlPointToUart
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineControlPointWrite
</UL>

<P><STRONG><a name="[18b]"></a>HandleControlPointCollision</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ftmps_task.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineControlPointWrite
</UL>

<P><STRONG><a name="[20b]"></a>ResetControlPermission</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftmps_task.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>SetControlPermissionToSuccess</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftmps_task.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>FitnessMachineControlPointWrite</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ftmps_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppMachineControlPointToUart
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleControlPointCollision
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineControlPointResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmp_writer_req_handler
</UL>

<P><STRONG><a name="[ca]"></a>FitnessMachineStatusnotify</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FitnessMachineStatusnotify &rArr; SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartDataToApp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_decode
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlink_set_status
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppMachineControlPointToUart
</UL>

<P><STRONG><a name="[18d]"></a>CheckUnlockCode</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ftmps_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyUnlockCode
</UL>

<P><STRONG><a name="[18e]"></a>VerifyUnlockCode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftmps_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckUnlockCode
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUnlockCode
</UL>

<P><STRONG><a name="[18f]"></a>addUnlockCode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ftmps_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyUnlockCode
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitnessExtensionDataWrite
</UL>

<P><STRONG><a name="[190]"></a>fitnessExtensionDataWrite</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ftmps_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAppExtensionDataToUart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addUnlockCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmp_writer_req_handler
</UL>

<P><STRONG><a name="[20d]"></a>ResetUnlockPermission</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ftmps_task.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>ResetWhenBluetoothDisconnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftmps_task.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>GetFitnessMachineStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftmps_task.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>attm_serv_convert_to128</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, attm_util128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attm_serv_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_util_svc_create_db128
</UL>

<P><STRONG><a name="[193]"></a>attm_char_convert_to128</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, attm_util128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attm_char_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_util_svc_create_db128
</UL>

<P><STRONG><a name="[183]"></a>attm_util_svc_create_db128</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, attm_util128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = attm_util_svc_create_db128 &rArr; attm_char_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_char_convert_to128
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_serv_convert_to128
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_init
</UL>

<P><STRONG><a name="[125]"></a>appm_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = appm_init &rArr; app_sec_init &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_get_dev_name
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_oads_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ftmp_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[1a7]"></a>appm_add_svc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appm_add_svc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[19b]"></a>appm_disconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appm_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>

<P><STRONG><a name="[19c]"></a>appm_start_advertising</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = appm_start_advertising &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_get_dev_name
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_ind_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[19d]"></a>appm_stop_advertising</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>

<P><STRONG><a name="[180]"></a>appm_update_param</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = appm_update_param &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_req_ind_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyWrite
</UL>

<P><STRONG><a name="[19e]"></a>appm_update_adv_data</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[19f]"></a>appm_get_dev_name</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appm_get_dev_name
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_req_ind_handler
</UL>

<P><STRONG><a name="[1a0]"></a>appm_send_seurity_req</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = appm_send_seurity_req &rArr; app_sec_send_security_req &rArr; app_get_encrypt_flag &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_send_security_req
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_security_req_handler
</UL>

<P><STRONG><a name="[198]"></a>app_batt_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_batt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
</UL>

<P><STRONG><a name="[5d]"></a>app_batt_add_bas</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_batt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_batt_add_bas
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>app_batt_enable_prf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_batt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = app_batt_enable_prf &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
</UL>

<P><STRONG><a name="[1a3]"></a>app_batt_send_lvl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_batt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>

<P><STRONG><a name="[196]"></a>app_dis_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
</UL>

<P><STRONG><a name="[5c]"></a>app_dis_add_dis</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_dis_add_dis
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.constdata)
</UL>
<P><STRONG><a name="[210]"></a>app_fff0_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fff0.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>app_fff0_add_fff0s</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_fff0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fff0_add_fff0s
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>app_fff1_send_lvl</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_fff0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = app_fff1_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_send
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_send_buf
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_rx_handler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff1_period_ntf_handler
</UL>

<P><STRONG><a name="[1a9]"></a>gpio_wkup_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
</UL>

<P><STRONG><a name="[1aa]"></a>power_off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_stop_advertising
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_disconnect
</UL>

<P><STRONG><a name="[19a]"></a>app_sec_init</STRONG> (Thumb, 56 bytes, Stack size 72 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_sec_init &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
</UL>

<P><STRONG><a name="[1a8]"></a>app_sec_get_bond_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_sec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
</UL>

<P><STRONG><a name="[1ac]"></a>app_get_bonding_flag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_get_bonding_flag &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_send_security_req
</UL>

<P><STRONG><a name="[1ad]"></a>app_get_encrypt_flag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_get_encrypt_flag &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_send_security_req
</UL>

<P><STRONG><a name="[1ae]"></a>app_sec_remove_bond</STRONG> (Thumb, 70 bytes, Stack size 80 bytes, app_sec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[1a1]"></a>app_sec_send_security_req</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_sec_send_security_req &rArr; app_get_encrypt_flag &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_encrypt_flag
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_bonding_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_send_seurity_req
</UL>

<P><STRONG><a name="[199]"></a>app_oads_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_oads.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
</UL>

<P><STRONG><a name="[5e]"></a>app_oad_add_oads</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_oad_add_oads &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>app_oads_enable_prf</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_oads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>

<P><STRONG><a name="[1b2]"></a>app_ffc1_ntf_req</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_oads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>

<P><STRONG><a name="[1b3]"></a>app_ffc2_ntf_req</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_oads.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>

<P><STRONG><a name="[197]"></a>app_ftmp_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_ftmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_ftmp_init &rArr; TrainingStatusRead &rArr; SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedRangeRead
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainingStatusRead
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InclinationRangeRead
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineFeatureRead
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
</UL>

<P><STRONG><a name="[5a]"></a>app_ftmp_add_ftmps</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_ftmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_ftmp_add_ftmps
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>app_send_lvl</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_ftmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUartDataToApp
</UL>

<P><STRONG><a name="[188]"></a>SendUartDataToApp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ftmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_lvl
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TreadmillDataNotify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainingStatusRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineStatusnotify
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineControlPointResponse
</UL>

<P><STRONG><a name="[18c]"></a>SendAppMachineControlPointToUart</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, app_ftmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_send
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrainingStatusRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineStatusnotify
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineControlPointResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineControlPointWrite
</UL>

<P><STRONG><a name="[191]"></a>SendAppExtensionDataToUart</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, app_ftmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apptc_cmd_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitnessExtensionDataWrite
</UL>

<P><STRONG><a name="[211]"></a>my_user_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ftmp.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>user_gpio_int_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ftmp.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>app_key_timer_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_ftmp.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_rx_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[214]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[215]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[217]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1bf]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz (via BLX)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c7]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[218]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[219]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[21a]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[146]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ac]"></a>Stack_Integrity_Check</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stack_Integrity_Check &rArr; uart_putchar &rArr; uart_dev_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_main
</UL>

<P><STRONG><a name="[1]"></a>Undefined</STRONG> (ARM, 0 bytes, Stack size unknown bytes, boot_vectors.o(SYS_BOOT))
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Exception (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(SYS_BOOT)
</UL>
<P><STRONG><a name="[2]"></a>SoftwareInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, boot_vectors.o(SYS_BOOT))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterrupt_Exception (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(SYS_BOOT)
</UL>
<P><STRONG><a name="[3]"></a>PrefetchAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, boot_vectors.o(SYS_BOOT))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort_Exception (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(SYS_BOOT)
</UL>
<P><STRONG><a name="[4]"></a>DataAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, boot_vectors.o(SYS_BOOT))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAbort_Exception (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(SYS_BOOT)
</UL>
<P><STRONG><a name="[6]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, boot_vectors.o(SYS_BOOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = IRQ_Handler &rArr; SYSirq_IRQ_Handler &rArr; IRQ_Exception &rArr; gpio_isr &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(SYS_BOOT)
</UL>
<P><STRONG><a name="[5]"></a>sys_reserved</STRONG> (ARM, 0 bytes, Stack size unknown bytes, boot_vectors.o(SYS_BOOT))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_Exception (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(SYS_BOOT)
</UL>
<P><STRONG><a name="[7]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, boot_vectors.o(SYS_BOOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = FIQ_Handler &rArr; SYSirq_FIQ_Handler &rArr; FIQ_Exception &rArr; rwble_isr &rArr; rwip_wakeup_end &rArr; rwip_prevent_sleep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSirq_FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(SYS_BOOT)
</UL>
<P><STRONG><a name="[22]"></a>uart_rx_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_rx_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pwd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>uart2_rx_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart2_rx_handler &rArr; app_fff1_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff1_send_lvl
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hilink.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>bdaddr_env_init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hilink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bdaddr_env_init &rArr; flash_read &rArr; flash_readword
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_init
</UL>

<P><STRONG><a name="[137]"></a>flash_unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeword
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readword
</UL>

<P><STRONG><a name="[136]"></a>flash_writeKey</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeword
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readword
</UL>

<P><STRONG><a name="[13a]"></a>flash_clearKey</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeword
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readword
</UL>

<P><STRONG><a name="[138]"></a>flash_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeword
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readword
</UL>

<P><STRONG><a name="[139]"></a>flash_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_writeword
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_readword
</UL>

<P><STRONG><a name="[29]"></a>rf_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_xvr.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>rf_txpwr_dbm_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_xvr.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>rf_sleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_xvr.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>rf_rpl_reg_rd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_xvr.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>rf_rpl_reg_wr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_xvr.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>rf_force_agc_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_xvr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_xvr.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>bass_init</STRONG> (Thumb, 342 bytes, Stack size 80 bytes, bass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bass_init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_permission
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>bass_destroy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bass_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>bass_create</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bass.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bass.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>bass_cleanup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bass.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bass.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>bass_notify_batt_lvl</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bass.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bass_notify_batt_lvl &rArr; bass_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
</UL>

<P><STRONG><a name="[31]"></a>bass_enable_req_handler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, bass_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bass_enable_req_handler &rArr; bass_exe_operation &rArr; bass_notify_batt_lvl &rArr; bass_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>bass_batt_level_upd_req_handler</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, bass_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bass_batt_level_upd_req_handler &rArr; bass_exe_operation &rArr; bass_notify_batt_lvl &rArr; bass_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, bass_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gattc_att_info_req_ind_handler &rArr; bass_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, bass_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gattc_write_req_ind_handler &rArr; bass_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, bass_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gattc_read_req_ind_handler &rArr; bass_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_pack_char_pres_fmt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bass_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gattc_cmp_evt_handler &rArr; bass_exe_operation &rArr; bass_notify_batt_lvl &rArr; bass_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>diss_init</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, diss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = diss_init &rArr; diss_compute_cfg_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_compute_cfg_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>diss_destroy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, diss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = diss_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>diss_create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, diss.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> diss.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>diss_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, diss.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> diss.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>diss_set_value_req_handler</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, diss_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = diss_set_value_req_handler &rArr; diss_value_to_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_check_val_len
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_to_handle
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, diss_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gattc_read_req_ind_handler &rArr; diss_handle_to_value
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_handle_to_value
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>diss_value_cfm_handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, diss_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = diss_value_cfm_handler &rArr; diss_value_to_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_value_to_handle
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>fff0s_init</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, fff0s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fff0s_init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_permission
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fff0s.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>fff0s_destroy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fff0s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fff0s_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fff0s.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>fff0s_create</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fff0s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fff0s.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>fff0s_cleanup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fff0s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fff0s.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>fff0s_fff1_level_upd_req_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fff0s_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fff0s_fff1_level_upd_req_handler &rArr; fff0s_notify_fff1_lvl &rArr; fff0s_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_notify_fff1_lvl
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fff0s_task.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, fff0s_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_att_info_req_ind_handler &rArr; fff0s_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_get_att_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fff0s_task.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, fff0s_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_write_req_ind_handler &rArr; fff0s_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_get_att_idx
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fff0s_task.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, fff0s_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattc_read_req_ind_handler &rArr; fff0s_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_get_att_idx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fff0s_task.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fff0s_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_cmp_evt_handler &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fff0s_task.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>prf_itf_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, prf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oads_prf_itf_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_prf_itf_get
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fff0s_prf_itf_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_prf_itf_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_prf_itf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_create
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_add_profile
</UL>

<P><STRONG><a name="[47]"></a>oads_init</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = oads_init &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_permission
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db128
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oads.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>oads_destroy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oads_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oads.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>oads_create</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oads.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> oads.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>oads_cleanup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oads.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> oads.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>oadImgIdentifyReq</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oadImgIdentifyReq &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyWrite
</UL>

<P><STRONG><a name="[17e]"></a>oadImgBlockReq</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oadImgBlockReq &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyWrite
</UL>

<P><STRONG><a name="[4b]"></a>oads_enable_req_handler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, oads_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = oads_enable_req_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oads_task.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>oads_ffc1_upd_req_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oads_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oads_ffc1_upd_req_handler &rArr; uart_putchar &rArr; uart_dev_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oads_task.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>oads_ffc2_upd_req_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oads_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oads_ffc2_upd_req_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oads_task.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, oads_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gattc_write_req_ind_handler &rArr; oadImgIdentifyWrite &rArr; appm_update_param &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgBlockWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyWrite
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oads_task.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, oads_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattc_read_req_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oads_task.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oads_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> oads_task.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>ftmps_init</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, ftmps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ftmps_init &rArr; attm_util_svc_create_db128 &rArr; attm_char_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_util_svc_create_db128
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftmps.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>ftmps_destroy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ftmps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ftmps_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftmps.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>ftmps_create</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ftmps.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ftmps.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>ftmps_cleanup</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ftmps.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ftmps.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>ftmps_level_upd_req_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftmps_level_upd_req_handler &rArr; ftmps_notify_lvl &rArr; ftmps_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_notify_lvl
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftmps_task.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_att_info_req_ind_handler &rArr; ftmps_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_get_att_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftmps_task.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattc_write_req_ind_handler &rArr; ftmps_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_get_att_idx
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftmps_task.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_read_req_ind_handler &rArr; ftmps_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftmps_get_att_idx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftmps_task.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ftmps_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattc_cmp_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftmps_task.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>bass_batt_level_ntf_cfg_ind_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_batt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_batt.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>batt_level_upd_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_batt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_batt.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>bass_enable_rsp_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_batt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_batt.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>app_batt_msg_dflt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_batt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_batt.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>diss_value_req_ind_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = diss_value_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via BLX)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_dis.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>fff0s_fff1_level_ntf_cfg_ind_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_fff0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fff0s_fff1_level_ntf_cfg_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_fff0.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>fff1_level_upd_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_fff0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_fff0.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>app_fff0_msg_dflt_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_fff0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_fff0_msg_dflt_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_fff0.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>fff2_writer_req_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_fff0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fff2_writer_req_handler &rArr; hilink_set_r_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hilink_set_r_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_fff0.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>fff1_period_ntf_handler</STRONG> (Thumb, 28 bytes, Stack size 136 bytes, app_fff0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = fff1_period_ntf_handler &rArr; app_fff1_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fff1_send_lvl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_fff0.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>appm_get_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = appm_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_msg_handler
</UL>

<P><STRONG><a name="[6a]"></a>gapm_device_ready_ind_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_device_ready_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapm_cmp_evt_handler &rArr; appm_start_advertising &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_add_svc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>gapc_get_dev_info_req_ind_handler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_get_dev_info_req_ind_handler &rArr; appm_get_dev_name
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_get_dev_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>gapc_set_dev_info_req_ind_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_set_dev_info_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>gapc_connection_req_ind_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gapc_connection_req_ind_handler &rArr; appm_start_advertising &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_get_bond_status
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_batt_enable_prf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>gapc_cmp_evt_handler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_cmp_evt_handler &rArr; appm_start_advertising &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>gapc_disconnect_ind_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_disconnect_ind_handler &rArr; appm_start_advertising &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_start_advertising
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>gapm_profile_added_ind_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_profile_added_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>app_period_timer_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = app_period_timer_handler &rArr; hi_timer_cb &rArr; TreadmillDataNotify &rArr; SendUartDataToApp &rArr; app_send_lvl &rArr; prf_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hi_timer_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>app_gpio_scan_timer_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>appm_msg_handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appm_msg_handler &rArr; appm_get_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_get_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>gapc_update_conn_param_req_ind_handler</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapc_update_conn_param_req_ind_handler &rArr; appm_update_param &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_update_param
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>gapc_le_pkt_size_ind_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapc_le_pkt_size_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>gapc_param_updated_ind_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapc_param_updated_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>gapc_send_security_req_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapc_send_security_req_handler &rArr; appm_send_seurity_req &rArr; app_sec_send_security_req &rArr; app_get_encrypt_flag &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_send_seurity_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>gattc_mtu_changed_ind_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gattc_mtu_changed_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>gapc_param_update_req_ind_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapc_param_update_req_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>gattc_mtu_exchange_req_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gattc_mtu_exchange_req_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>gapc_bond_req_ind_handler</STRONG> (Thumb, 302 bytes, Stack size 88 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapc_bond_req_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>gapc_bond_ind_handler</STRONG> (Thumb, 294 bytes, Stack size 88 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapc_bond_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_sector
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>gapc_encrypt_req_ind_handler</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapc_encrypt_req_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appm_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>gapc_encrypt_ind_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapc_encrypt_ind_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>app_sec_msg_dflt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_sec.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_sec.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>oads_enable_rsp_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_oads.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_oads.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>app_oads_msg_dflt_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_oads_msg_dflt_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_oads.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>app_ffc1_writer_req_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_ffc1_writer_req_handler &rArr; oadImgIdentifyWrite &rArr; appm_update_param &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oadImgIdentifyWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_oads.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>app_ffc2_writer_req_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_ffc2_writer_req_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_oads.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>oads_ffc1_upd_rsp_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oads_ffc1_upd_rsp_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_oads.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>oads_ffc2_upd_rsp_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_oads.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oads_ffc2_upd_rsp_handler &rArr; uart_printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_oads.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>ftmps_level_ntf_cfg_ind_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_ftmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[1b8]"></a>ftmp_level_upd_handler</STRONG> (Thumb, 26 bytes, Stack size 136 bytes, app_ftmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b9]"></a>app_ftmp_msg_dflt_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_ftmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[1ba]"></a>ftmp_writer_req_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_ftmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fitnessExtensionDataWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FitnessMachineControlPointWrite
</UL>

<P><STRONG><a name="[1c9]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_core</STRONG> (Thumb, 1764 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[1cc]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1cb]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
